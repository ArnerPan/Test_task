{"name": "test_link_is_direct_to_address[https://redirect.appmetrica.yandex.com/serve/530701752928854806]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\n  (Session info: headless chrome=103.0.5060.66)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x01146463+2188387]\n\tOrdinal0 [0x010DE461+1762401]\n\tOrdinal0 [0x00FF3D78+802168]\n\tOrdinal0 [0x00FF04E8+787688]\n\tOrdinal0 [0x00FE654D+746829]\n\tOrdinal0 [0x00FE710A+749834]\n\tOrdinal0 [0x00FE675A+747354]\n\tOrdinal0 [0x00FE5D3F+744767]\n\tOrdinal0 [0x00FE4C28+740392]\n\tOrdinal0 [0x00FE50FD+741629]\n\tOrdinal0 [0x00FF5544+808260]\n\tOrdinal0 [0x0104D2DD+1168093]\n\tOrdinal0 [0x0103C7DC+1099740]\n\tOrdinal0 [0x0104CC22+1166370]\n\tOrdinal0 [0x0103C5F6+1099254]\n\tOrdinal0 [0x01016BE0+945120]\n\tOrdinal0 [0x01017AD6+948950]\n\tGetHandleVerifier [0x013E71F2+2712546]\n\tGetHandleVerifier [0x013D886D+2652765]\n\tGetHandleVerifier [0x011D002A+520730]\n\tGetHandleVerifier [0x011CEE06+516086]\n\tOrdinal0 [0x010E468B+1787531]\n\tOrdinal0 [0x010E8E88+1805960]\n\tOrdinal0 [0x010E8F75+1806197]\n\tOrdinal0 [0x010F1DF1+1842673]\n\tBaseThreadInitThunk [0x7524FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x771F7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x771F7A6E+238]", "trace": "should = <model.Appliccation.App object at 0x000002C118D59BA0>, link = 'https://redirect.appmetrica.yandex.com/serve/530701752928854806'\n\n    @allure.link(\"https://t.me/ArnerPan\", name=\"author\")\n    @allure.sub_suite(\"Get all links on a site, check if they direct exact to address\")\n    @allure.description(\"Check if link follows exactly to it`s URL\")\n    @allure.story(\"check every link is direct to address \")\n    @pytest.mark.parametrize('link', links)\n    def test_link_is_direct_to_address(should, link: str):\n>       with allure.step(f\"Got URL {should.get_url_by_link(link)} by link {link} \"):\n\ntests\\test_mos_ru_probation.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmodel\\Appliccation.py:24: in get_url_by_link\n    driver.get(link)\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:436: in get\n    self.execute(Command.GET, {'url': url})\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C1181629E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_RESET\\\\n  (S...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771F7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x771F7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_RESET\nE         (Session info: headless chrome=103.0.5060.66)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x01146463+2188387]\nE       \tOrdinal0 [0x010DE461+1762401]\nE       \tOrdinal0 [0x00FF3D78+802168]\nE       \tOrdinal0 [0x00FF04E8+787688]\nE       \tOrdinal0 [0x00FE654D+746829]\nE       \tOrdinal0 [0x00FE710A+749834]\nE       \tOrdinal0 [0x00FE675A+747354]\nE       \tOrdinal0 [0x00FE5D3F+744767]\nE       \tOrdinal0 [0x00FE4C28+740392]\nE       \tOrdinal0 [0x00FE50FD+741629]\nE       \tOrdinal0 [0x00FF5544+808260]\nE       \tOrdinal0 [0x0104D2DD+1168093]\nE       \tOrdinal0 [0x0103C7DC+1099740]\nE       \tOrdinal0 [0x0104CC22+1166370]\nE       \tOrdinal0 [0x0103C5F6+1099254]\nE       \tOrdinal0 [0x01016BE0+945120]\nE       \tOrdinal0 [0x01017AD6+948950]\nE       \tGetHandleVerifier [0x013E71F2+2712546]\nE       \tGetHandleVerifier [0x013D886D+2652765]\nE       \tGetHandleVerifier [0x011D002A+520730]\nE       \tGetHandleVerifier [0x011CEE06+516086]\nE       \tOrdinal0 [0x010E468B+1787531]\nE       \tOrdinal0 [0x010E8E88+1805960]\nE       \tOrdinal0 [0x010E8F75+1806197]\nE       \tOrdinal0 [0x010F1DF1+1842673]\nE       \tBaseThreadInitThunk [0x7524FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x771F7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x771F7A6E+238]\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "description": "Check if link follows exactly to it`s URL", "parameters": [{"name": "link", "value": "'https://redirect.appmetrica.yandex.com/serve/530701752928854806'"}], "start": 1656869373821, "stop": 1656869414589, "uuid": "c2e0bbfd-7f69-4885-9449-a000b34a4099", "historyId": "3c7f04be4326169ec98e9789366d0b60", "testCaseId": "f5d29af539e4b57550b6fb1fc7735560", "fullName": "tests.test_mos_ru_probation#test_link_is_direct_to_address", "labels": [{"name": "subSuite", "value": "Get all links on a site, check if they direct exact to address"}, {"name": "story", "value": "check every link is direct to address "}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_mos_ru_probation"}, {"name": "host", "value": "DESKTOP-AGKQQKC"}, {"name": "thread", "value": "18688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_mos_ru_probation"}], "links": [{"type": "link", "url": "https://t.me/ArnerPan", "name": "author"}]}